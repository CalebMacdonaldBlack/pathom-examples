<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="AutoImportSettings">
    <option name="autoReloadType" value="SELECTIVE" />
  </component>
  <component name="ChangeListManager">
    <list default="true" id="637c114c-5487-480f-807c-2ab5c2ce974e" name="Changes" comment="">
      <change beforePath="$PROJECT_DIR$/.idea/clojure-deps.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/clojure-deps.xml" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/.idea/dictionaries/calebmacdonaldblack.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/dictionaries/calebmacdonaldblack.xml" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/.idea/runConfigurations/REPL.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/runConfigurations/REPL.xml" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/deps.edn" beforeDir="false" afterPath="$PROJECT_DIR$/deps.edn" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/pathom-example.iml" beforeDir="false" afterPath="$PROJECT_DIR$/pathom-example.iml" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/main/clj/com/example/core11.clj" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/clj/com/example/core11.clj" afterDir="false" />
    </list>
    <option name="SHOW_DIALOG" value="false" />
    <option name="HIGHLIGHT_CONFLICTS" value="true" />
    <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
    <option name="LAST_RESOLUTION" value="IGNORE" />
  </component>
  <component name="DepsLocalSettings">
    <option name="repoId" value="" />
    <option name="repoUrl" value="" />
  </component>
  <component name="DepsProjectDetails">
    <option name="cachedModuleDetails">
      <map>
        <entry key="$PROJECT_DIR$/deps.edn">
          <value>
            <ModuleDetails>
              <option name="details" value="{:paths [&quot;/Users/calebmacdonaldblack/IdeaProjects/pathom-example/src/main/clj&quot; &quot;/Users/calebmacdonaldblack/IdeaProjects/pathom-example/src/main/resources&quot;], :deps {org.clojure/clojure {:mvn/version &quot;1.11.1&quot;}, com.wsscode/transito {:mvn/version &quot;2021.07.04&quot;}, com.taoensso/tufte {:mvn/version &quot;2.3.0&quot;}, com.stuartsierra/component {:mvn/version &quot;1.1.0&quot;}, com.wsscode/pathom3 {:mvn/version &quot;2023.01.31-alpha&quot;}, environ/environ {:mvn/version &quot;1.2.0&quot;}, com.fzakaria/slf4j-timbre {:mvn/version &quot;0.3.21&quot;}, metosin/malli {:mvn/version &quot;0.8.9&quot;}, town.lilac/pyramid {:mvn/version &quot;3.4.0&quot;}, com.wsscode/pathom-viz-connector {:mvn/version &quot;2021.04.20&quot;}, datascript/datascript {:mvn/version &quot;1.4.0&quot;}, http-kit/http-kit {:mvn/version &quot;2.6.0&quot;}}, :aliases {:deps {:replace-paths [], :replace-deps {org.clojure/tools.deps.alpha {:mvn/version &quot;0.15.1244&quot;}, org.slf4j/slf4j-nop {:mvn/version &quot;1.7.25&quot;}}, :ns-default clojure.tools.cli.api, :ns-aliases {help clojure.tools.cli.help}}, :test {:extra-paths [&quot;/Users/calebmacdonaldblack/IdeaProjects/pathom-example/src/test/clj&quot; &quot;/Users/calebmacdonaldblack/IdeaProjects/pathom-example/src/test/resources&quot;], :extra-deps {io.github.cognitect-labs/test-runner {:git/tag &quot;v0.5.1&quot;, :git/sha &quot;dfb30dd&quot;}}, :exec-fn cognitect.test-runner.api/test}, :caleb {:extra-deps {djblue/portal {:mvn/version &quot;0.30.0&quot;}, com.wsscode/pathom-viz-connector {:mvn/version &quot;2022.02.14&quot;}}}, :test-refresh {:extra-deps {com.jakemccrary/test-refresh {:mvn/version &quot;0.25.0&quot;}}, :main-opts [&quot;-m&quot; &quot;com.jakemccrary.test-refresh&quot;]}, :local {:extra-deps {org.clojure/tools.namespace {:mvn/version &quot;1.3.0&quot;}}, :extra-paths [&quot;/Users/calebmacdonaldblack/IdeaProjects/pathom-example/src/local/clj&quot;]}}, :mvn/repos {&quot;central&quot; {:url &quot;https://repo1.maven.org/maven2/&quot;}, &quot;clojars&quot; {:url &quot;https://repo.clojars.org/&quot;}}, :system-aliases #{:test :deps :caleb}, :deps-tree {com.cognitect/transit-java {:mvn/version &quot;1.0.362&quot;, :deps/manifest :mvn, :dependents [com.cognitect/transit-clj], :paths [&quot;/Users/calebmacdonaldblack/.m2/repository/com/cognitect/transit-java/1.0.362/transit-java-1.0.362.jar&quot;], :children (com.fasterxml.jackson.core/jackson-core org.msgpack/msgpack javax.xml.bind/jaxb-api)}, org.clojure/data.json {:mvn/version &quot;2.4.0&quot;, :deps/manifest :mvn, :dependents [djblue/portal], :paths [&quot;/Users/calebmacdonaldblack/.m2/repository/org/clojure/data.json/2.4.0/data.json-2.4.0.jar&quot;], :children ()}, org.clojure/clojure {:mvn/version &quot;1.11.1&quot;, :deps/manifest :mvn, :paths [&quot;/Users/calebmacdonaldblack/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar&quot;], :dependents [], :children (org.clojure/core.specs.alpha org.clojure/spec.alpha)}, org.clojure/tools.analyzer {:mvn/version &quot;1.0.0&quot;, :deps/manifest :mvn, :dependents [org.clojure/tools.analyzer.jvm], :paths [&quot;/Users/calebmacdonaldblack/.m2/repository/org/clojure/tools.analyzer/1.0.0/tools.analyzer-1.0.0.jar&quot;], :children ()}, com.fulcrologic/guardrails {:mvn/version &quot;1.1.11&quot;, :deps/manifest :mvn, :dependents [com.wsscode/pathom3], :paths [&quot;/Users/calebmacdonaldblack/.m2/repository/com/fulcrologic/guardrails/1.1.11/guardrails-1.1.11.jar&quot;], :children (expound/expound org.clojure/core.async)}, com.wsscode/async {:mvn/version &quot;1.0.11&quot;, :deps/manifest :mvn, :dependents [com.wsscode/pathom-viz-connector], :paths [&quot;/Users/calebmacdonaldblack/.m2/repository/com/wsscode/async/1.0.11/async-1.0.11.jar&quot;], :children ()}, org.clojure/core.specs.alpha {:mvn/version &quot;0.2.62&quot;, :deps/manifest :mvn, :dependents [org.clojure/clojure], :paths [&quot;/Users/calebmacdonaldblack/.m2/repository/org/clojure/core.specs.alpha/0.2.62/core.specs.alpha-0.2.62.jar&quot;], :children ()}, edn-query-language/eql {:mvn/version &quot;2021.02.28&quot;, :deps/manifest :mvn, :dependents [com.wsscode/pathom3], :paths [&quot;/Users/calebmacdonaldblack/.m2/repository/edn-query-language/eql/2021.02.28/eql-2021.02.28.jar&quot;], :children ()}, com.wsscode/transito {:mvn/version &quot;2021.07.04&quot;, :deps/manifest :mvn, :paths [&quot;/Users/calebmacdonaldblack/.m2/repository/com/wsscode/transito/2021.07.04/transito-2021.07.04.jar&quot;], :dependents [], :children ()}, expound/expound {:mvn/version &quot;0.8.7&quot;, :deps/manifest :mvn, :dependents [com.fulcrologic/guardrails], :paths [&quot;/Users/calebmacdonaldblack/.m2/repository/expound/expound/0.8.7/expound-0.8.7.jar&quot;], :children ()}, org.clojure/spec.alpha {:mvn/version &quot;0.3.218&quot;, :deps/manifest :mvn, :dependents [org.clojure/clojure], :paths [&quot;/Users/calebmacdonaldblack/.m2/repository/org/clojure/spec.alpha/0.3.218/spec.alpha-0.3.218.jar&quot;], :children ()}, org.clojure/tools.cli {:mvn/version &quot;1.0.206&quot;, :deps/manifest :mvn, :dependents [io.github.cognitect-labs/test-runner], :paths [&quot;/Users/calebmacdonaldblack/.m2/repository/org/clojure/tools.cli/1.0.206/tools.cli-1.0.206.jar&quot;], :children ()}, com.taoensso/encore {:mvn/version &quot;3.24.0&quot;, :deps/manifest :mvn, :dependents [com.taoensso/tufte], :paths [&quot;/Users/calebmacdonaldblack/.m2/repository/com/taoensso/encore/3.24.0/encore-3.24.0.jar&quot;], :children (com.taoensso/truss)}, io.github.cognitect-labs/test-runner {:git/tag &quot;v0.5.1&quot;, :git/sha &quot;dfb30dd6605cb6c0efc275e1df1736f6e90d4d73&quot;, :git/url &quot;https://github.com/cognitect-labs/test-runner.git&quot;, :deps/manifest :deps, :deps/root &quot;/Users/calebmacdonaldblack/.gitlibs/libs/io.github.cognitect-labs/test-runner/dfb30dd6605cb6c0efc275e1df1736f6e90d4d73&quot;, :paths [&quot;/Users/calebmacdonaldblack/.gitlibs/libs/io.github.cognitect-labs/test-runner/dfb30dd6605cb6c0efc275e1df1736f6e90d4d73/src&quot;], :dependents [], :children (org.clojure/tools.cli org.clojure/tools.namespace)}, org.clojure/tools.analyzer.jvm {:mvn/version &quot;1.1.0&quot;, :deps/manifest :mvn, :dependents [org.clojure/core.async], :paths [&quot;/Users/calebmacdonaldblack/.m2/repository/org/clojure/tools.analyzer.jvm/1.1.0/tools.analyzer.jvm-1.1.0.jar&quot;], :children (org.clojure/tools.analyzer org.ow2.asm/asm org.clojure/core.memoize)}, com.taoensso/tufte {:mvn/version &quot;2.3.0&quot;, :deps/manifest :mvn, :paths [&quot;/Users/calebmacdonaldblack/.m2/repository/com/taoensso/tufte/2.3.0/tufte-2.3.0.jar&quot;], :dependents [], :children (com.taoensso/encore)}, com.googlecode.json-simple/json-simple {:mvn/version &quot;1.1.1&quot;, :exclusions #{junit/junit}, :deps/manifest :mvn, :dependents [org.msgpack/msgpack], :paths [&quot;/Users/calebmacdonaldblack/.m2/repository/com/googlecode/json-simple/json-simple/1.1.1/json-simple-1.1.1.jar&quot;], :children ()}, com.cognitect/transit-cljs {:mvn/version &quot;0.8.280&quot;, :deps/manifest :mvn, :dependents [djblue/portal], :paths [&quot;/Users/calebmacdonaldblack/.m2/repository/com/cognitect/transit-cljs/0.8.280/transit-cljs-0.8.280.jar&quot;], :children (com.cognitect/transit-js)}, io.aviso/pretty {:mvn/version &quot;0.1.33&quot;, :deps/manifest :mvn, :dependents [com.taoensso/timbre], :paths [&quot;/Users/calebmacdonaldblack/.m2/repository/io/aviso/pretty/0.1.33/pretty-0.1.33.jar&quot;], :children ()}, com.stuartsierra/component {:mvn/version &quot;1.1.0&quot;, :deps/manifest :mvn, :paths [&quot;/Users/calebmacdonaldblack/.m2/repository/com/stuartsierra/component/1.1.0/component-1.1.0.jar&quot;], :dependents [], :children (com.stuartsierra/dependency)}, org.clojure/tools.namespace {:mvn/version &quot;1.3.0&quot;, :deps/manifest :mvn, :dependents [io.github.cognitect-labs/test-runner], :paths [&quot;/Users/calebmacdonaldblack/.m2/repository/org/clojure/tools.namespace/1.3.0/tools.namespace-1.3.0.jar&quot;], :children (org.clojure/java.classpath org.clojure/tools.reader)}, fipp/fipp {:mvn/version &quot;0.6.26&quot;, :deps/manifest :mvn, :dependents [metosin/malli], :paths [&quot;/Users/calebmacdonaldblack/.m2/repository/fipp/fipp/0.6.26/fipp-0.6.26.jar&quot;], :children (org.clojure/core.rrb-vector)}, com.fasterxml.jackson.core/jackson-core {:mvn/version &quot;2.8.7&quot;, :deps/manifest :mvn, :dependents [com.cognitect/transit-java], :paths [&quot;/Users/calebmacdonaldblack/.m2/repository/com/fasterxml/jackson/core/jackson-core/2.8.7/jackson-core-2.8.7.jar&quot;], :children ()}, djblue/portal {:mvn/version &quot;0.30.0&quot;, :deps/manifest :mvn, :paths [&quot;/Users/calebmacdonaldblack/.m2/repository/djblue/portal/0.30.0/portal-0.30.0.jar&quot;], :dependents [], :children (org.clojure/data.json com.cognitect/transit-cljs com.cognitect/transit-clj com.google.code.gson/gson)}, org.ow2.asm/asm {:mvn/version &quot;5.2&quot;, :deps/manifest :mvn, :dependents [org.clojure/tools.analyzer.jvm], :paths [&quot;/Users/calebmacdonaldblack/.m2/repository/org/ow2/asm/asm/5.2/asm-5.2.jar&quot;], :children ()}, mvxcvi/arrangement {:mvn/version &quot;2.0.0&quot;, :deps/manifest :mvn, :dependents [metosin/malli], :paths [&quot;/Users/calebmacdonaldblack/.m2/repository/mvxcvi/arrangement/2.0.0/arrangement-2.0.0.jar&quot;], :children ()}, com.wsscode/pathom3 {:mvn/version &quot;2023.01.31-alpha&quot;, :deps/manifest :mvn, :paths [&quot;/Users/calebmacdonaldblack/.m2/repository/com/wsscode/pathom3/2023.01.31-alpha/pathom3-2023.01.31-alpha.jar&quot;], :dependents [], :children (com.fulcrologic/guardrails edn-query-language/eql funcool/promesa com.wsscode/cljc-misc potemkin/potemkin)}, com.cognitect/transit-js {:mvn/version &quot;0.8.874&quot;, :deps/manifest :mvn, :dependents [com.cognitect/transit-cljs], :paths [&quot;/Users/calebmacdonaldblack/.m2/repository/com/cognitect/transit-js/0.8.874/transit-js-0.8.874.jar&quot;], :children ()}, clj-tuple/clj-tuple {:mvn/version &quot;0.2.2&quot;, :deps/manifest :mvn, :dependents [potemkin/potemkin], :paths [&quot;/Users/calebmacdonaldblack/.m2/repository/clj-tuple/clj-tuple/0.2.2/clj-tuple-0.2.2.jar&quot;], :children ()}, com.taoensso/truss {:mvn/version &quot;1.6.0&quot;, :deps/manifest :mvn, :dependents [com.taoensso/encore], :paths [&quot;/Users/calebmacdonaldblack/.m2/repository/com/taoensso/truss/1.6.0/truss-1.6.0.jar&quot;], :children ()}, riddley/riddley {:mvn/version &quot;0.1.12&quot;, :deps/manifest :mvn, :dependents [potemkin/potemkin], :paths [&quot;/Users/calebmacdonaldblack/.m2/repository/riddley/riddley/0.1.12/riddley-0.1.12.jar&quot;], :children ()}, org.javassist/javassist {:mvn/version &quot;3.18.1-GA&quot;, :deps/manifest :mvn, :dependents [org.msgpack/msgpack], :paths [&quot;/Users/calebmacdonaldblack/.m2/repository/org/javassist/javassist/3.18.1-GA/javassist-3.18.1-GA.jar&quot;], :children ()}, org.clojure/java.classpath {:mvn/version &quot;1.0.0&quot;, :deps/manifest :mvn, :dependents [org.clojure/tools.namespace], :paths [&quot;/Users/calebmacdonaldblack/.m2/repository/org/clojure/java.classpath/1.0.0/java.classpath-1.0.0.jar&quot;], :children ()}, com.taoensso/sente {:mvn/version &quot;1.16.0&quot;, :deps/manifest :mvn, :dependents [com.wsscode/pathom-viz-connector], :paths [&quot;/Users/calebmacdonaldblack/.m2/repository/com/taoensso/sente/1.16.0/sente-1.16.0.jar&quot;], :children (org.java-websocket/Java-WebSocket)}, environ/environ {:mvn/version &quot;1.2.0&quot;, :deps/manifest :mvn, :paths [&quot;/Users/calebmacdonaldblack/.m2/repository/environ/environ/1.2.0/environ-1.2.0.jar&quot;], :dependents [], :children ()}, com.fzakaria/slf4j-timbre {:mvn/version &quot;0.3.21&quot;, :deps/manifest :mvn, :paths [&quot;/Users/calebmacdonaldblack/.m2/repository/com/fzakaria/slf4j-timbre/0.3.21/slf4j-timbre-0.3.21.jar&quot;], :dependents [], :children (com.taoensso/timbre org.slf4j/slf4j-api)}, borkdude/dynaload {:mvn/version &quot;0.3.4&quot;, :deps/manifest :mvn, :dependents [metosin/malli], :paths [&quot;/Users/calebmacdonaldblack/.m2/repository/borkdude/dynaload/0.3.4/dynaload-0.3.4.jar&quot;], :children ()}, org.msgpack/msgpack {:mvn/version &quot;0.6.12&quot;, :deps/manifest :mvn, :dependents [com.cognitect/transit-java], :paths [&quot;/Users/calebmacdonaldblack/.m2/repository/org/msgpack/msgpack/0.6.12/msgpack-0.6.12.jar&quot;], :children (com.googlecode.json-simple/json-simple org.javassist/javassist)}, borkdude/edamame {:mvn/version &quot;1.0.0&quot;, :deps/manifest :mvn, :dependents [metosin/malli], :paths [&quot;/Users/calebmacdonaldblack/.m2/repository/borkdude/edamame/1.0.0/edamame-1.0.0.jar&quot;], :children ()}, com.taoensso/timbre {:mvn/version &quot;4.10.0&quot;, :deps/manifest :mvn, :dependents [com.fzakaria/slf4j-timbre com.taoensso/sente], :paths [&quot;/Users/calebmacdonaldblack/.m2/repository/com/taoensso/timbre/4.10.0/timbre-4.10.0.jar&quot;], :children (io.aviso/pretty)}, metosin/malli {:mvn/version &quot;0.8.9&quot;, :deps/manifest :mvn, :paths [&quot;/Users/calebmacdonaldblack/.m2/repository/metosin/malli/0.8.9/malli-0.8.9.jar&quot;], :dependents [], :children (fipp/fipp mvxcvi/arrangement borkdude/dynaload borkdude/edamame org.clojure/test.check)}, com.cognitect/transit-clj {:mvn/version &quot;1.0.329&quot;, :deps/manifest :mvn, :dependents [djblue/portal], :paths [&quot;/Users/calebmacdonaldblack/.m2/repository/com/cognitect/transit-clj/1.0.329/transit-clj-1.0.329.jar&quot;], :children (com.cognitect/transit-java)}, town.lilac/cascade {:mvn/version &quot;2.0.1&quot;, :deps/manifest :mvn, :dependents [town.lilac/pyramid], :paths [&quot;/Users/calebmacdonaldblack/.m2/repository/town/lilac/cascade/2.0.1/cascade-2.0.1.jar&quot;], :children ()}, town.lilac/pyramid {:mvn/version &quot;3.4.0&quot;, :deps/manifest :mvn, :paths [&quot;/Users/calebmacdonaldblack/.m2/repository/town/lilac/pyramid/3.4.0/pyramid-3.4.0.jar&quot;], :dependents [], :children (town.lilac/cascade)}, org.clojure/core.rrb-vector {:mvn/version &quot;0.1.2&quot;, :deps/manifest :mvn, :dependents [fipp/fipp], :paths [&quot;/Users/calebmacdonaldblack/.m2/repository/org/clojure/core.rrb-vector/0.1.2/core.rrb-vector-0.1.2.jar&quot;], :children ()}, funcool/promesa {:mvn/version &quot;8.0.450&quot;, :deps/manifest :mvn, :dependents [com.wsscode/pathom3], :paths [&quot;/Users/calebmacdonaldblack/.m2/repository/funcool/promesa/8.0.450/promesa-8.0.450.jar&quot;], :children ()}, persistent-sorted-set/persistent-sorted-set {:mvn/version &quot;0.2.3&quot;, :deps/manifest :mvn, :dependents [datascript/datascript], :paths [&quot;/Users/calebmacdonaldblack/.m2/repository/persistent-sorted-set/persistent-sorted-set/0.2.3/persistent-sorted-set-0.2.3.jar&quot;], :children ()}, org.java-websocket/Java-WebSocket {:mvn/version &quot;1.5.1&quot;, :deps/manifest :mvn, :dependents [com.taoensso/sente], :paths [&quot;/Users/calebmacdonaldblack/.m2/repository/org/java-websocket/Java-WebSocket/1.5.1/Java-WebSocket-1.5.1.jar&quot;], :children ()}, com.wsscode/pathom-viz-connector {:mvn/version &quot;2022.02.14&quot;, :deps/manifest :mvn, :paths [&quot;/Users/calebmacdonaldblack/.m2/repository/com/wsscode/pathom-viz-connector/2022.02.14/pathom-viz-connector-2022.02.14.jar&quot;], :dependents [], :children (com.wsscode/async com.taoensso/sente com.wsscode/promesa-bridges)}, org.clojure/tools.reader {:mvn/version &quot;1.3.6&quot;, :deps/manifest :mvn, :dependents [com.taoensso/encore org.clojure/tools.namespace], :paths [&quot;/Users/calebmacdonaldblack/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar&quot;], :children ()}, datascript/datascript {:mvn/version &quot;1.4.0&quot;, :deps/manifest :mvn, :paths [&quot;/Users/calebmacdonaldblack/.m2/repository/datascript/datascript/1.4.0/datascript-1.4.0.jar&quot;], :dependents [], :children (persistent-sorted-set/persistent-sorted-set)}, com.wsscode/cljc-misc {:mvn/version &quot;2022.03.07&quot;, :deps/manifest :mvn, :dependents [com.wsscode/pathom3], :paths [&quot;/Users/calebmacdonaldblack/.m2/repository/com/wsscode/cljc-misc/2022.03.07/cljc-misc-2022.03.07.jar&quot;], :children ()}, potemkin/potemkin {:mvn/version &quot;0.4.5&quot;, :deps/manifest :mvn, :dependents [com.wsscode/pathom3], :paths [&quot;/Users/calebmacdonaldblack/.m2/repository/potemkin/potemkin/0.4.5/potemkin-0.4.5.jar&quot;], :children (clj-tuple/clj-tuple riddley/riddley)}, org.slf4j/slf4j-api {:mvn/version &quot;1.7.30&quot;, :deps/manifest :mvn, :dependents [com.fzakaria/slf4j-timbre], :paths [&quot;/Users/calebmacdonaldblack/.m2/repository/org/slf4j/slf4j-api/1.7.30/slf4j-api-1.7.30.jar&quot;], :children ()}, org.clojure/test.check {:mvn/version &quot;1.1.1&quot;, :deps/manifest :mvn, :dependents [metosin/malli], :paths [&quot;/Users/calebmacdonaldblack/.m2/repository/org/clojure/test.check/1.1.1/test.check-1.1.1.jar&quot;], :children ()}, org.clojure/core.memoize {:mvn/version &quot;1.0.236&quot;, :deps/manifest :mvn, :dependents [org.clojure/tools.analyzer.jvm], :paths [&quot;/Users/calebmacdonaldblack/.m2/repository/org/clojure/core.memoize/1.0.236/core.memoize-1.0.236.jar&quot;], :children (org.clojure/core.cache)}, com.stuartsierra/dependency {:mvn/version &quot;1.0.0&quot;, :deps/manifest :mvn, :dependents [com.stuartsierra/component], :paths [&quot;/Users/calebmacdonaldblack/.m2/repository/com/stuartsierra/dependency/1.0.0/dependency-1.0.0.jar&quot;], :children ()}, org.clojure/data.priority-map {:mvn/version &quot;1.0.0&quot;, :deps/manifest :mvn, :dependents [org.clojure/core.cache], :paths [&quot;/Users/calebmacdonaldblack/.m2/repository/org/clojure/data.priority-map/1.0.0/data.priority-map-1.0.0.jar&quot;], :children ()}, org.clojure/core.cache {:mvn/version &quot;1.0.207&quot;, :deps/manifest :mvn, :dependents [org.clojure/core.memoize], :paths [&quot;/Users/calebmacdonaldblack/.m2/repository/org/clojure/core.cache/1.0.207/core.cache-1.0.207.jar&quot;], :children (org.clojure/data.priority-map)}, org.clojure/core.async {:mvn/version &quot;1.3.618&quot;, :deps/manifest :mvn, :dependents [com.fulcrologic/guardrails], :paths [&quot;/Users/calebmacdonaldblack/.m2/repository/org/clojure/core.async/1.3.618/core.async-1.3.618.jar&quot;], :children (org.clojure/tools.analyzer.jvm)}, javax.xml.bind/jaxb-api {:mvn/version &quot;2.3.0&quot;, :deps/manifest :mvn, :dependents [com.cognitect/transit-java], :paths [&quot;/Users/calebmacdonaldblack/.m2/repository/javax/xml/bind/jaxb-api/2.3.0/jaxb-api-2.3.0.jar&quot;], :children ()}, com.google.code.gson/gson {:mvn/version &quot;2.9.1&quot;, :deps/manifest :mvn, :dependents [djblue/portal], :paths [&quot;/Users/calebmacdonaldblack/.m2/repository/com/google/code/gson/gson/2.9.1/gson-2.9.1.jar&quot;], :children ()}, http-kit/http-kit {:mvn/version &quot;2.6.0&quot;, :deps/manifest :mvn, :paths [&quot;/Users/calebmacdonaldblack/.m2/repository/http-kit/http-kit/2.6.0/http-kit-2.6.0.jar&quot;], :dependents [], :children ()}, com.wsscode/promesa-bridges {:mvn/version &quot;2021.01.20&quot;, :deps/manifest :mvn, :dependents [com.wsscode/pathom-viz-connector], :paths [&quot;/Users/calebmacdonaldblack/.m2/repository/com/wsscode/promesa-bridges/2021.01.20/promesa-bridges-2021.01.20.jar&quot;], :children ()}}, :test-paths [&quot;/Users/calebmacdonaldblack/IdeaProjects/pathom-example/src/test/clj&quot; &quot;/Users/calebmacdonaldblack/IdeaProjects/pathom-example/src/test/resources&quot;]}" />
              <option name="hash" value="c447064aa819c4bdd750e5e9856366dc" />
            </ModuleDetails>
          </value>
        </entry>
      </map>
    </option>
  </component>
  <component name="FileTemplateManagerImpl">
    <option name="RECENT_TEMPLATES">
      <list>
        <option value="Clojure Namespace" />
        <option value="Clojure Test Namespace" />
      </list>
    </option>
  </component>
  <component name="Git.Settings">
    <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
  </component>
  <component name="HighlightingSettingsPerFile">
    <setting file="jar://$MAVEN_REPOSITORY$/datascript/datascript/1.4.0/datascript-1.4.0.jar!/datascript/core.cljc" root0="SKIP_INSPECTION" />
    <setting file="jar://$MAVEN_REPOSITORY$/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/main.clj" root0="SKIP_INSPECTION" />
  </component>
  <component name="KubernetesApiPersistence">
    <option name="context" value="kind-kind" />
  </component>
  <component name="MacroExpansionManager">
    <option name="directoryName" value="i3ql0e65" />
  </component>
  <component name="MarkdownSettingsMigration">
    <option name="stateVersion" value="1" />
  </component>
  <component name="ProjectId" id="2EuTXq0pBmon8V6gE1M4TFDraN3" />
  <component name="ProjectLevelVcsManager" settingsEditedManually="true" />
  <component name="ProjectViewState">
    <option name="hideEmptyMiddlePackages" value="true" />
    <option name="showLibraryContents" value="true" />
  </component>
  <component name="PropertiesComponent">{
  &quot;keyToString&quot;: {
    &quot;ASKED_MARK_IGNORED_FILES_AS_EXCLUDED&quot;: &quot;true&quot;,
    &quot;RunOnceActivity.OpenProjectViewOnStart&quot;: &quot;true&quot;,
    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,
    &quot;RunOnceActivity.go.format.on.save.advertiser.fired&quot;: &quot;true&quot;,
    &quot;RunOnceActivity.go.formatter.settings.were.checked&quot;: &quot;true&quot;,
    &quot;RunOnceActivity.go.migrated.go.modules.settings&quot;: &quot;true&quot;,
    &quot;WebServerToolWindowFactoryState&quot;: &quot;false&quot;,
    &quot;cursive.last.file.extension./Users/calebmacdonaldblack/IdeaProjects/pathom-example/src/main/clj&quot;: &quot;clj&quot;,
    &quot;go.import.settings.migrated&quot;: &quot;true&quot;,
    &quot;last_opened_file_path&quot;: &quot;/Users/calebmacdonaldblack/IdeaProjects/pathom-example/src/main/clj/com/calebmacdonaldblack/cyclone&quot;,
    &quot;node.js.detected.package.eslint&quot;: &quot;true&quot;,
    &quot;node.js.selected.package.eslint&quot;: &quot;(autodetect)&quot;,
    &quot;nodejs_package_manager_path&quot;: &quot;npm&quot;,
    &quot;project.structure.last.edited&quot;: &quot;Modules&quot;,
    &quot;project.structure.proportion&quot;: &quot;0.0&quot;,
    &quot;project.structure.side.proportion&quot;: &quot;0.2&quot;,
    &quot;settings.editor.selected.configurable&quot;: &quot;com.maddyhome.idea.vim.ui.VimEmulationConfigurable&quot;
  },
  &quot;keyToStringList&quot;: {
    &quot;com.intellij.ide.scratch.ScratchImplUtil$2/New Scratch File&quot;: [
      &quot;Clojure&quot;,
      &quot;TEXT&quot;
    ]
  }
}</component>
  <component name="RecentsManager">
    <key name="CopyFile.RECENT_KEYS">
      <recent name="$PROJECT_DIR$/src/main/clj/com/calebmacdonaldblack/cyclone" />
      <recent name="$PROJECT_DIR$/src/main/clj/com/example" />
      <recent name="$PROJECT_DIR$" />
    </key>
  </component>
  <component name="ReplState" timestamp="1675314422435">{:repl-history {:ide [], :local [{:command &quot;(-&gt; (doto (DecimalFormat. \&quot;#.###\&quot;)\n      (.setRoundingMode RoundingMode/HALF_UP))\n    (.format 69696.90000000001))&quot;, :offset 114, :ns &quot;solar.beam.entity.charge-test&quot;} {:command &quot;(deftest charge-total-cost-pathom-integration-test\n  (let [interval-data-tmp-file (io/file (format \&quot;/tmp/%s.csv\&quot; (random-uuid)))]\n    (spit interval-data-tmp-file \&quot;datetime,kWh,kW,kVA\\n1/1/18 0:30,638,1276.00,1503.50\\n1/1/18 1:00,632,1264.00,1485.71\\n1/1/18 1:30,628.8,1257.60,1481.96\\n1/1/18 2:00,635.2,1270.40,1488.65\\n\&quot;)\n    (testing \&quot;A more thorough test integrating with other key pathom resolvers\&quot;\n      (d/transact\n        t.entity/conn\n        {:tx-data [{:configuration/id      #uuid\&quot;cfd2ca9e-a80f-4813-b5b5-bf327a4f34b6\&quot;\n                    :configuration/systems [{:system/id                   #uuid\&quot;1b311b58-5500-4d78-82a5-ee8578e02743\&quot;\n                                             :system/kind                 :system/consumer\n                                             :consumer/interval-data-file (.getAbsolutePath interval-data-tmp-file)}\n                                            {:system/id      #uuid\&quot;03a4184d-b5ca-45e9-b6ca-8cf75f0b0b88\&quot;\n                                             :system/kind    :system/meter\n                                             :system/charges [{:charge/id        #uuid\&quot;d81207a6-9e44-40cb-9f44-b81eb1b525ab\&quot;\n                                                               :charge/kind      :tou/any-time\n                                                               :charge/unit-rate :rate/cpkwh\n                                                               :charge/value     0.1}]}]}]})\n      (is (= 69696.90000000001\n             (-&gt; (pci/register entity/pathom-index)\n                 (t.entity/merge-env)\n                 (psm/smart-map {:configuration/id       #uuid\&quot;cfd2ca9e-a80f-4813-b5b5-bf327a4f34b6\&quot;\n                                 :simulation/n-intervals 4})\n                 (:configuration/systems)))))))&quot;, :offset 1773, :ns &quot;solar.beam.entity.charge-test&quot;} {:command &quot;(random-uuid)&quot;, :offset 13, :ns &quot;solar.beam.entity.configuration-test&quot;} {:command &quot;(rmap/rmap! {:foo 1\n             :bar (ref :foo)})&quot;, :offset 50, :ns &quot;com.example.core10&quot;} {:command &quot;(-&gt; (rmap/rmap! \n      {:foo 1\n       :bar (ref :foo)})\n    :foo)&quot;, :offset 65, :ns &quot;com.example.core10&quot;} {:command &quot;(:foo (rmap/rmap! {:foo 1\n                   :bar (ref :foo)}))&quot;, :offset 63, :ns &quot;com.example.core10&quot;} {:command &quot;(:bar (rmap/rmap! {:foo 1\n                   :bar (ref :foo)}))&quot;, :offset 63, :ns &quot;com.example.core10&quot;} {:command &quot;(:bar\n  (rmap/rmap! {:foo 1\n               :bar (rmap/ref :foo)}))&quot;, :offset 66, :ns &quot;com.example.core10&quot;} {:command &quot;(rmap/rmap! {:foo 1\n             :bar (rmap/ref :foo)})&quot;, :offset 55, :ns &quot;com.example.core10&quot;} {:command &quot;(rmap/rmap!\n  {:house {:house/address   \&quot;1 House Street\&quot;\n           :house/occupants [{:occupant/first-name \&quot;Sam\&quot;\n                              :occupant/house      (rmap/ref :house)}\n                             {:occupant/first-name \&quot;Kerry\&quot;\n                              :occupant/house      (rmap/ref :house)}\n                             {:occupant/first-name \&quot;John\&quot;\n                              :occupant/house      (rmap/ref :house)}]}})&quot;, :offset 444, :ns &quot;com.example.core10&quot;} {:command &quot;(def foo \n  {:h1 (prn \&quot;1\&quot;)})&quot;, :offset 28, :ns &quot;com.example.core10&quot;} {:command &quot;(py/db [house-data])&quot;, :offset 20, :ns &quot;com.example.core10&quot;} {:command &quot;(deftest pyramid-test\n  (is\n    (-&gt;&gt; (py/db [{:db/id           0\n                  :house/address   \&quot;1 House Street\&quot;\n                  :house/occupants [{:db/id               1\n                                     :occupant/first-name \&quot;Sam\&quot;}\n                                    {:db/id               2\n                                     :occupant/first-name \&quot;Kerry\&quot;}\n                                    {:db/id               3\n                                     :occupant/first-name \&quot;John\&quot;}]}])\n         (= {0 {:db/id           0\n                :house/address   \&quot;1 House Street\&quot;\n                :house/occupants [[:db/id 1]\n                                  [:db/id 2]\n                                  [:db/id 3]]}\n             1 {:db/id               1\n                :occupant/first-name \&quot;Sam\&quot;}\n             2 {:db/id               2\n                :occupant/first-name \&quot;Kerry\&quot;}\n             3 {:db/id               3\n                :occupant/first-name \&quot;John\&quot;}})))\n\n  (is (= {:db/id {0 {:db/id           0\n                     :house/address   \&quot;1 House Street\&quot;\n                     :house/occupants [[:db/id 1]\n                                       [:db/id 2]\n                                       [:db/id 3]]}\n                  1 {:db/id               1\n                     :occupant/first-name \&quot;Sam\&quot;}\n                  2 {:db/id               2\n                     :occupant/first-name \&quot;Kerry\&quot;}\n                  3 {:db/id               3\n                     :occupant/first-name \&quot;John\&quot;}}}\n         (py/db [{:db/id           0\n                  :house/address   \&quot;1 House Street\&quot;\n                  :house/occupants [{:db/id               1\n                                     :occupant/first-name \&quot;Sam\&quot;}\n                                    {:db/id               2\n                                     :occupant/first-name \&quot;Kerry\&quot;}\n                                    {:db/id               3\n                                     :occupant/first-name \&quot;John\&quot;}]}]))))&quot;, :offset 1982, :ns &quot;com.example.core10&quot;} {:command &quot;(-&gt;&gt; (py/db [{:db/id           0\n              :house/address   \&quot;1 House Street\&quot;\n              :house/occupants [{:db/id               1\n                                 :occupant/first-name \&quot;Sam\&quot;}\n                                {:db/id               2\n                                 :occupant/first-name \&quot;Kerry\&quot;}\n                                {:db/id               3\n                                 :occupant/first-name \&quot;John\&quot;}]}])\n     (= {0 {:db/id           0\n            :house/address   \&quot;1 House Street\&quot;\n            :house/occupants [[:db/id 1]\n                              [:db/id 2]\n                              [:db/id 3]]}\n         1 {:db/id               1\n            :occupant/first-name \&quot;Sam\&quot;}\n         2 {:db/id               2\n            :occupant/first-name \&quot;Kerry\&quot;}\n         3 {:db/id               3\n            :occupant/first-name \&quot;John\&quot;}}))&quot;, :offset 871, :ns &quot;com.example.core10&quot;} {:command &quot;(-&gt;&gt; (py/db [{:db/id           0\n              :house/address   \&quot;1 House Street\&quot;\n              :house/occupants [{:db/id               1\n                                 :occupant/first-name \&quot;Sam\&quot;}\n                                {:db/id               2\n                                 :occupant/first-name \&quot;Kerry\&quot;}\n                                {:db/id               3\n                                 :occupant/first-name \&quot;John\&quot;}]}])\n     (vector {0 {:db/id           0\n                 :house/address   \&quot;1 House Street\&quot;\n                 :house/occupants [[:db/id 1]\n                                   [:db/id 2]\n                                   [:db/id 3]]}\n              1 {:db/id               1\n                 :occupant/first-name \&quot;Sam\&quot;}\n              2 {:db/id               2\n                 :occupant/first-name \&quot;Kerry\&quot;}\n              3 {:db/id               3\n                 :occupant/first-name \&quot;John\&quot;}}))&quot;, :offset 926, :ns &quot;com.example.core10&quot;} {:command &quot;(-&gt;&gt; (py/db [{:db/id           0\n              :house/address   \&quot;1 House Street\&quot;\n              :house/occupants [{:db/id               1\n                                 :occupant/first-name \&quot;Sam\&quot;}\n                                {:db/id               2\n                                 :occupant/first-name \&quot;Kerry\&quot;}\n                                {:db/id               3\n                                 :occupant/first-name \&quot;John\&quot;}]}]\n            :db/id)\n     (= {0 {:db/id           0\n            :house/address   \&quot;1 House Street\&quot;\n            :house/occupants [[:db/id 1]\n                              [:db/id 2]\n                              [:db/id 3]]}\n         1 {:db/id               1\n            :occupant/first-name \&quot;Sam\&quot;}\n         2 {:db/id               2\n            :occupant/first-name \&quot;Kerry\&quot;}\n         3 {:db/id               3\n            :occupant/first-name \&quot;John\&quot;}}))&quot;, :offset 890, :ns &quot;com.example.core10&quot;} {:command &quot;(py/db [{:db/id           0\n         :house/address   \&quot;1 House Street\&quot;\n         :house/occupants [{:db/id               1\n                            :occupant/first-name \&quot;Sam\&quot;}\n                           {:db/id               2\n                            :occupant/first-name \&quot;Kerry\&quot;}\n                           {:db/id               3\n                            :occupant/first-name \&quot;John\&quot;}]}]\n       :db/id)&quot;, :offset 412, :ns &quot;com.example.core10&quot;} {:command &quot;(py/db {:db/id           0\n        :house/address   \&quot;1 House Street\&quot;\n        :house/occupants [{:db/id               1\n                           :occupant/first-name \&quot;Sam\&quot;}\n                          {:db/id               2\n                           :occupant/first-name \&quot;Kerry\&quot;}\n                          {:db/id               3\n                           :occupant/first-name \&quot;John\&quot;}]}\n       :db/id)&quot;, :offset 403, :ns &quot;com.example.core10&quot;} {:command &quot;(py/db [{:db/id           0\n         :house/address   \&quot;1 House Street\&quot;\n         :house/occupants [{:db/id               1\n                            :occupant/first-name \&quot;Sam\&quot;}\n                           {:db/id               2\n                            :occupant/first-name \&quot;Kerry\&quot;}\n                           {:db/id               3\n                            :occupant/first-name \&quot;John\&quot;}]}])&quot;, :offset 398, :ns &quot;com.example.core10&quot;} {:command &quot;(py/entities\n  (py/db [{:db/id           0\n           :house/address   \&quot;1 House Street\&quot;\n           :house/occupants [{:db/id               1\n                              :occupant/first-name \&quot;Sam\&quot;}\n                             {:db/id               2\n                              :occupant/first-name \&quot;Kerry\&quot;}\n                             {:db/id               3\n                              :occupant/first-name \&quot;John\&quot;}]}]))&quot;, :offset 428, :ns &quot;com.example.core10&quot;} {:command &quot;(deftest pyramid-test\n  (is\n    (-&gt;&gt; (py/db [{:db/id           0\n                  :house/address   \&quot;1 House Street\&quot;\n                  :house/occupants [{:db/id               1\n                                     :occupant/first-name \&quot;Sam\&quot;}\n                                    {:db/id               2\n                                     :occupant/first-name \&quot;Kerry\&quot;}\n                                    {:db/id               3\n                                     :occupant/first-name \&quot;John\&quot;}]}])\n         :db/id\n         (= {0 {:db/id           0\n                :house/address   \&quot;1 House Street\&quot;\n                :house/occupants [[:db/id 1]\n                                  [:db/id 2]\n                                  [:db/id 3]]}\n             1 {:db/id               1\n                :occupant/first-name \&quot;Sam\&quot;}\n             2 {:db/id               2\n                :occupant/first-name \&quot;Kerry\&quot;}\n             3 {:db/id               3\n                :occupant/first-name \&quot;John\&quot;}}))))&quot;, :offset 993, :ns &quot;com.example.core10&quot;} {:command &quot;(deftest subtraction\n  (is (= 1 (- 4 3)))\n  (is (= 6 (- 7 4))))&quot;, :offset 63, :ns &quot;com.example.core10&quot;} {:command &quot;(coll? {})&quot;, :offset 10, :ns &quot;com.example.core10&quot;} {:command &quot;(coll? [])&quot;, :offset 10, :ns &quot;com.example.core10&quot;} {:command &quot;(coll? \&quot;\&quot;)&quot;, :offset 10, :ns &quot;com.example.core10&quot;} {:command &quot;(coll? '())&quot;, :offset 11, :ns &quot;com.example.core10&quot;} {:command &quot;(coll? (first {:foo :bar}))&quot;, :offset 27, :ns &quot;com.example.core10&quot;} {:command &quot;(py/db\n  {:person/id 0 :person/name \&quot;Rachel\&quot;\n   :friend/list [{:person/id 1 :person/name \&quot;Marco\&quot;}\n                 {:person/id 2 :person/name \&quot;Cassie\&quot;}\n                 {:person/id 3 :person/name \&quot;Jake\&quot;}\n                 {:person/id 4 :person/name \&quot;Tobias\&quot;}\n                 {:person/id 5 :person/name \&quot;Ax\&quot;}]})&quot;, :offset 310, :ns &quot;com.example.core10&quot;} {:command &quot;(py/db\n  [{:person/id 0 :person/name \&quot;Rachel\&quot;\n    :friend/list [{:person/id 1 :person/name \&quot;Marco\&quot;}\n                  {:person/id 2 :person/name \&quot;Cassie\&quot;}\n                  {:person/id 3 :person/name \&quot;Jake\&quot;}\n                  {:person/id 4 :person/name \&quot;Tobias\&quot;}\n                  {:person/id 5 :person/name \&quot;Ax\&quot;}]}])&quot;, :offset 317, :ns &quot;com.example.core10&quot;} {:command &quot;(py/db\n  [{:person/id 0 :person/name \&quot;Rachel\&quot;\n    :friend/list [{:person/id 2 :person/name \&quot;Cassie\&quot;}]}\n   {:person/id 0\n    :friend/list [{:person/id 1 :person/name \&quot;Marco\&quot;}]}])&quot;, :offset 177, :ns &quot;com.example.core10&quot;} {:command &quot;(py/pull foo [[:py/id #uuid\&quot;7045f9bc-1b51-4b2f-9adb-7c62475c31b1\&quot;]])&quot;, :offset 68, :ns &quot;com.example.core10&quot;} {:command &quot;(def foo (-&gt; {:house/address   \&quot;1 House Street\&quot;\n              :house/occupants [{:occupant/first-name \&quot;Sam\&quot;}\n                                {:occupant/first-name \&quot;Kerry\&quot;}\n                                {:occupant/first-name \&quot;John\&quot;}]}\n             (-&gt;pyramid-db)))&quot;, :offset 265, :ns &quot;com.example.core10&quot;} {:command &quot;foo&quot;, :offset 3, :ns &quot;com.example.core10&quot;} {:command &quot;(-&gt; {:house/address   \&quot;1 House Street\&quot;\n     :house/occupants [{:occupant/first-name \&quot;Sam\&quot;}\n                       {:occupant/first-name \&quot;Kerry\&quot;}\n                       {:occupant/first-name \&quot;John\&quot;}]}\n    (-&gt;pyramid-db))&quot;, :offset 219, :ns &quot;com.example.core10&quot;} {:command &quot;(clojure.tools.namespace.repl/refresh)&quot;, :offset 38, :ns &quot;user&quot;} {:command &quot;(def client-request\n  (p.eql/boundary-interface client-env))&quot;, :offset 60, :ns &quot;com.example.dynamic-resolvers.example1&quot;} {:command &quot;(client-request\n  [{:user/all\n    [:user/name\n     :user/ip\n     :company/name]}])&quot;, :offset 82, :ns &quot;com.example.dynamic-resolvers.example1&quot;} {:command &quot;(p.eql/process\n  env\n  {:com.example.family/id \&quot;Family1\&quot;}\n  '[{'* ['*]}])&quot;, :offset 73, :ns &quot;com.example.core16&quot;} {:command &quot;(p.eql/process\n  env\n  {:com.example.family/id \&quot;Family1\&quot;}\n  [{* [*]}])&quot;, :offset 70, :ns &quot;com.example.core16&quot;} {:command &quot;(p.eql/process\n  env\n  {:com.example.family/id \&quot;Family1\&quot;}\n  '[{* [*]}])&quot;, :offset 71, :ns &quot;com.example.core16&quot;} {:command &quot;(p.eql/process\n  env\n  {:com.example.family/id \&quot;Family1\&quot;}\n  '[*])&quot;, :offset 65, :ns &quot;com.example.core16&quot;} {:command &quot;(p.eql/process\n  env\n  {:com.example.family/id \&quot;Family1\&quot;}\n  [:com.example.family/surname])&quot;, :offset 90, :ns &quot;com.example.core16&quot;} {:command &quot;family-by-id&quot;, :offset 12, :ns &quot;com.example.core16&quot;} {:command &quot;(p.eql/process\n  env\n  {:com.example.family/id \&quot;Family1\&quot;}\n  [:com.example.family/members])&quot;, :offset 90, :ns &quot;com.example.core16&quot;} {:command &quot;(p.eql/process\n  env\n  {:com.example.family/id \&quot;Family1\&quot;}\n  [{:com.example.family/members\n    [:com.example.person/first-name]}])&quot;, :offset 129, :ns &quot;com.example.core16&quot;} {:command &quot;(p.eql/process\n  env\n  {:com.example.family/id \&quot;Family1\&quot;}\n  [{:com.example.family/members\n    [:com.example.person/first-name\n     :com.example.person/surname]}])&quot;, :offset 162, :ns &quot;com.example.core16&quot;} {:command &quot;(let [env (-&gt; (pci/register\n                [foo])\n              (update ::pf.eql/map-select-include\n                coll/sconj :tempids))]\n  (p.eql/process env [{'(foo {:bar \&quot;baz\&quot;}) [:value]}]))&quot;, :offset 195, :ns &quot;com.example.core16&quot;} {:command &quot;(def new-db\n  (-&gt; (d/empty-db {:com.example/id     {:db/unique :db.unique/identity}\n                   :com.example/spouse {:db/valueType   :db.type/ref\n                                        :db/cardinality :db.cardinality/one}})\n      (d/db-with [[:db/add \&quot;caleb\&quot; :com.example/id \&quot;caleb\&quot;]\n                  [:db/add \&quot;erin\&quot; :com.example/id \&quot;erin\&quot;]\n                  [:db/add [:com.example/id \&quot;caleb\&quot;] :com.example.person/given-name \&quot;Caleb Ian Geoffrey\&quot;]\n                  [:db/add [:com.example/id \&quot;erin\&quot;] :com.example.person/given-name \&quot;Erin Therese\&quot;]\n                  [:db/add [:com.example/id \&quot;caleb\&quot;] :com.example.spouse [:com.example/id \&quot;erin\&quot;]]\n                  [:db/add [:com.example/id \&quot;erin\&quot;] :com.example/spouse [:com.example/id \&quot;caleb\&quot;]]])))&quot;, :offset 756, :ns &quot;com.calebmacdonaldblack.cyclone.example&quot;} {:command &quot;new-db&quot;, :offset 6, :ns &quot;com.calebmacdonaldblack.cyclone.example&quot;} {:command &quot;(p.plugin/defplugin foo-plugin\n  {::pcr/wrap-merge-attribute\n   (fn [original]\n     (fn [{:com.example/keys [conn] :as env} {:com.example/keys [id] :as out} k v]\n       (prn \&quot;-------------------\&quot;)\n       (prn [{:com.example/id id\n              k               v}])\n       (d/transact! conn [{:com.example/id id\n                           k               v}])\n       (original env out k v)))})&quot;, :offset 392, :ns &quot;com.calebmacdonaldblack.cyclone.example2&quot;} {:command &quot;(def env\n  (-&gt; (pci/register [person-given-name\n                     person-spouse\n                     person-spouse-reverse-lookup\n                     default-person-spouse\n                     person-surname\n                     person-surname-inherit-from-spouse])\n      (p.plugin/register [foo-plugin])\n      (psm/with-wrap-nested? false)\n      (assoc :com.example/conn new-conn)\n      (p.connector/connect-env {::pvc/parser-id `env})))&quot;, :offset 442, :ns &quot;com.calebmacdonaldblack.cyclone.example2&quot;} {:command &quot;person-spouse-reverse-lookup&quot;, :offset 28, :ns &quot;com.calebmacdonaldblack.cyclone.example2&quot;} {:command &quot;person-spouse&quot;, :offset 13, :ns &quot;com.calebmacdonaldblack.cyclone.example2&quot;} {:command &quot;(map key db-schema)&quot;, :offset 19, :ns &quot;com.calebmacdonaldblack.cyclone.example2&quot;} {:command &quot;(defn schema-&gt;resolver\n  [schema]\n  (let [identity?  (comp #{:db.unique/identity} :db/unique val)\n        identities (into []\n                     (comp val (filter identity?))\n                     schema)]\n    identities))&quot;, :offset 223, :ns &quot;com.calebmacdonaldblack.cyclone.example2&quot;} {:command &quot;(map val db-schema)&quot;, :offset 19, :ns &quot;com.calebmacdonaldblack.cyclone.example2&quot;} {:command &quot;(defn schema-&gt;resolver\n  [schema]\n  (let [identity?  (comp #{:db.unique/identity} :db/unique val)\n        identities (into []\n                     (comp key (filter identity?))\n                     schema)]\n    identities))&quot;, :offset 223, :ns &quot;com.calebmacdonaldblack.cyclone.example2&quot;} {:command &quot;(defn schema-&gt;resolver\n  [schema]\n  (let [identity?  (comp #{:db.unique/identity} :db/unique val)\n        identities (into []\n                     (filter identity?)\n                     schema)]\n    identities))&quot;, :offset 212, :ns &quot;com.calebmacdonaldblack.cyclone.example2&quot;} {:command &quot;(defn schema-&gt;resolver\n  [schema]\n  (let [identity?  (comp #{:db.unique/identity} :db/unique val)\n        identities (into []\n                     (comp \n                       (filter identity?)\n                       (map key))\n                     schema)]\n    identities))&quot;, :offset 276, :ns &quot;com.calebmacdonaldblack.cyclone.example2&quot;} {:command &quot;(defn schema-&gt;resolver\n  [schema]\n  (let [identity?           (comp #{:db.unique/identity} :db/unique val)\n        identity-attr-xform (comp (filter identity?) (map key))\n        identity-attrs      (into [] identity-attr-xform schema)\n        ref?                (comp #{:db.type/ref} :db/valueType val)\n        value-attr-xform    (comp (remove ref? schema))\n        value-attrs         (into [] value-attr-xform schema)]\n    value-attrs))&quot;, :offset 441, :ns &quot;com.calebmacdonaldblack.cyclone.example2&quot;} {:command &quot;(defn schema-&gt;resolver\n  [schema]\n  (let [identity?           (comp #{:db.unique/identity} :db/unique val)\n        identity-attr-xform (comp (filter identity?) (map key))\n        identity-attrs      (into [] identity-attr-xform schema)\n        ref?                (comp #{:db.type/ref} :db/valueType val)\n        value-attr-xform    (comp (remove ref? schema) (map key))\n        value-attrs         (into [] value-attr-xform schema)]\n    value-attrs))&quot;, :offset 451, :ns &quot;com.calebmacdonaldblack.cyclone.example2&quot;} {:command &quot;(defn schema-&gt;resolver\n  [schema]\n  (let [identity?           (comp #{:db.unique/identity} :db/unique val)\n        identity-attr-xform (comp (filter identity?) (map key))\n        identity-attrs      (into [] identity-attr-xform schema)\n        ref?                (comp #{:db.type/ref} :db/valueType val)\n        value-attr-xform    (comp (remove ref?) (map key))\n        value-attrs         (into [] value-attr-xform schema)]\n    value-attrs))&quot;, :offset 444, :ns &quot;com.calebmacdonaldblack.cyclone.example2&quot;} {:command &quot;(defn schema-&gt;resolver\n  [schema]\n  (let [identity?           (comp #{:db.unique/identity} :db/unique val)\n        identity-attr-xform (comp (filter identity?) (map key))\n        identity-attrs      (into [] identity-attr-xform schema)\n        ref?                (comp #{:db.type/ref} :db/valueType val)\n        value-attr-xform    (comp (remove ref?) (map key))\n        value-attrs         (into [] value-attr-xform schema)\n        ref-attr-xform      (comp (filter ref?) (map key))\n        ref-attrs           (into [] ref-attr-xform schema)]\n    ref-attrs))&quot;, :offset 561, :ns &quot;com.calebmacdonaldblack.cyclone.example2&quot;} {:command &quot;(schema-&gt;resolver db-schema)&quot;, :offset 28, :ns &quot;com.calebmacdonaldblack.cyclone.example2&quot;} {:command &quot;(schema-&gt;resolvers db-schema)&quot;, :offset 29, :ns &quot;com.calebmacdonaldblack.cyclone.example2&quot;} {:command &quot;(-&gt;Foo)&quot;, :offset 7, :ns &quot;com.calebmacdonaldblack.cyclone.example3&quot;} {:command &quot;(prefer-method print-method IRecord IDeref)&quot;, :offset 43, :ns &quot;com.calebmacdonaldblack.cyclone.example3&quot;} {:command &quot;(ns com.wsscode.pathom3.connect.runner)&quot;, :offset 39, :ns &quot;user&quot;} {:command &quot;(&gt;defn run-graph!*\n       \&quot;Run the root node of the graph. As resolvers run, the result will be add to the\n       entity cache tree.\&quot;\n       [{::pcp/keys [graph] :as env}]\n       [(s/keys :req [::pcp/graph ::p.ent/entity-tree*])\n        =&gt; (s/keys)]\n       (let [env (assoc env ::source-entity (p.ent/entity env))]\n         ; mutations\n         (process-mutations! env)\n\n         ; compute nested available fields\n         (if-let [nested (::pcp/nested-process graph)]\n           (merge-resolver-response! env (select-keys (p.ent/entity env) nested)))\n\n         ; process idents\n         (if-let [idents (::pcp/idents graph)]\n           (process-idents! env idents))\n\n         ; now run the nodes\n         (run-root-node! env)\n\n         env))&quot;, :offset 742, :ns &quot;com.wsscode.pathom3.connect.runner&quot;} {:command &quot;(&gt;defn run-graph!*\n       \&quot;Run the root node of the graph. As resolvers run, the result will be add to the\n       entity cache tree.\&quot;\n       [{::pcp/keys [graph] :as env}]\n       [(s/keys :req [::pcp/graph ::p.ent/entity-tree*])\n        =&gt; (s/keys)]\n       (let [env (assoc env ::source-entity (p.ent/entity env))]\n         ; mutations\n         (process-mutations! env)\n\n         ; compute nested available fields\n         (if-let [nested (::pcp/nested-process graph)]\n           (prn \&quot;!!!!!\&quot;)\n           (prn nested)\n           (merge-resolver-response! env (select-keys (p.ent/entity env) nested)))\n\n         ; process idents\n         (if-let [idents (::pcp/idents graph)]\n           (process-idents! env idents))\n\n         ; now run the nodes\n         (run-root-node! env)\n\n         env))&quot;, :offset 791, :ns &quot;com.wsscode.pathom3.connect.runner&quot;} {:command &quot;(&gt;defn run-graph!*\n       \&quot;Run the root node of the graph. As resolvers run, the result will be add to the\n       entity cache tree.\&quot;\n       [{::pcp/keys [graph] :as env}]\n       [(s/keys :req [::pcp/graph ::p.ent/entity-tree*])\n        =&gt; (s/keys)]\n       (let [env (assoc env ::source-entity (p.ent/entity env))]\n         ; mutations\n         (process-mutations! env)\n\n         ; compute nested available fields\n         (if-let [nested (::pcp/nested-process graph)]\n           (prn nested)\n           (merge-resolver-response! env (select-keys (p.ent/entity env) nested)))\n\n         ; process idents\n         (if-let [idents (::pcp/idents graph)]\n           (process-idents! env idents))\n\n         ; now run the nodes\n         (run-root-node! env)\n\n         env))&quot;, :offset 766, :ns &quot;com.wsscode.pathom3.connect.runner&quot;} {:command &quot;(&gt;defn merge-entity-data\n  \&quot;Specialized merge versions that work on entity data.\&quot;\n  [env entity new-data]\n  [(s/keys :opt [::merge-attribute]) ::p.ent/entity-tree ::p.ent/entity-tree\n   =&gt; ::p.ent/entity-tree]\n  (reduce-kv\n    (fn [out k v]\n      (prn \&quot;=============\&quot;)\n      (prn k v)\n      (if (refs/kw-identical? v ::pco/unknown-value)\n        out\n        (p.plugin/run-with-plugins env ::wrap-merge-attribute\n                                   (fn merge-entity-data--internal [env m k v]\n                                     (assoc m k (process-attr-subquery env entity k v)))\n                                   env out k v)))\n    entity\n    new-data))&quot;, :offset 655, :ns &quot;com.wsscode.pathom3.connect.runner&quot;} {:command &quot;(&gt;defn run-graph!*\n       \&quot;Run the root node of the graph. As resolvers run, the result will be add to the\n       entity cache tree.\&quot;\n       [{::pcp/keys [graph] :as env}]\n       [(s/keys :req [::pcp/graph ::p.ent/entity-tree*])\n        =&gt; (s/keys)]\n       (let [env (assoc env ::source-entity (p.ent/entity env))]\n         ; mutations\n         (process-mutations! env)\n\n         ; compute nested available fields\n         (if-let [nested (::pcp/nested-process graph)]\n           (do\n             (prn \&quot;-------\&quot;)\n             (prn nested)\n             (merge-resolver-response! env (select-keys (p.ent/entity env) nested))))\n\n         ; process idents\n         (if-let [idents (::pcp/idents graph)]\n           (process-idents! env idents))\n\n         ; now run the nodes\n         (run-root-node! env)\n\n         env))&quot;, :offset 815, :ns &quot;com.wsscode.pathom3.connect.runner&quot;} {:command &quot;(defn check-entity-requires!\n  \&quot;Verify if entity contains all required keys from graph index-ast. This is\n  shallow check (don't visit nested entities).\&quot;\n  [{::pcp/keys    [graph]\n    ::p.path/keys [path]\n    :as           env}]\n  (let [entity   (p.ent/entity env)\n        _ (prn \&quot;.................\&quot;)\n        _ (prn entity)\n        expected (zipmap\n                   (into []\n                     (comp (map :key)\n                           (remove #(pph/placeholder-key? env %)))\n                     (:children (pcp/required-ast-from-source-ast graph)))\n                   (repeat {}))\n        missing  (pfsd/missing (pfsd/data-&gt;shape-descriptor-shallow entity) expected)]\n    (if (seq missing)\n      (fail-fast env\n                 (ex-info (str\n                            \&quot;Required attributes missing: \&quot; (pr-str (vec (keys missing)))\n                            \&quot; at path \&quot; (pr-str path))\n                          {:missing        missing\n                           ::p.error/phase ::execute\n                           ::p.error/cause ::p.error/missing-output})))))&quot;, :offset 1072, :ns &quot;com.wsscode.pathom3.connect.runner&quot;} {:command &quot;(&gt;defn merge-entity-data\n  \&quot;Specialized merge versions that work on entity data.\&quot;\n  [env entity new-data]\n  [(s/keys :opt [::merge-attribute]) ::p.ent/entity-tree ::p.ent/entity-tree\n   =&gt; ::p.ent/entity-tree]\n  (reduce-kv\n    (fn [out k v]\n      (prn \&quot;=============\&quot;)\n      (prn k v)\n      (prn (refs/kw-identical? v ::pco/unknown-value))\n      (if (refs/kw-identical? v ::pco/unknown-value)\n        out\n        (p.plugin/run-with-plugins env ::wrap-merge-attribute\n                                   (fn merge-entity-data--internal [env m k v]\n                                     (assoc m k (process-attr-subquery env entity k v)))\n                                   env out k v)))\n    entity\n    new-data))&quot;, :offset 710, :ns &quot;com.wsscode.pathom3.connect.runner&quot;} {:command &quot;(defn check-entity-requires!\n  \&quot;Verify if entity contains all required keys from graph index-ast. This is\n  shallow check (don't visit nested entities).\&quot;\n  [{::pcp/keys    [graph]\n    ::p.path/keys [path]\n    :as           env}]\n  (let [entity   (p.ent/entity env)\n        expected (zipmap\n                   (into []\n                     (comp (map :key)\n                           (remove #(pph/placeholder-key? env %)))\n                     (:children (pcp/required-ast-from-source-ast graph)))\n                   (repeat {}))\n        missing  (pfsd/missing (pfsd/data-&gt;shape-descriptor-shallow entity) expected)]\n    (if (seq missing)\n      (fail-fast env\n                 (ex-info (str\n                            \&quot;Required attributes missing: \&quot; (pr-str (vec (keys missing)))\n                            \&quot; at path \&quot; (pr-str path))\n                          {:missing        missing\n                           ::p.error/phase ::execute\n                           ::p.error/cause ::p.error/missing-output})))))&quot;, :offset 1013, :ns &quot;com.wsscode.pathom3.connect.runner&quot;} {:command &quot;(&gt;defn process-attr-subquery\n  [{::pcp/keys [graph]\n    :as        env} entity k v]\n  [(s/keys :req [::pcp/graph]) map?\n   (s/or :path ::p.path/path-entry\n         :ast :edn-query-language.ast/node)\n   any?\n   =&gt; any?]\n  (let [{:keys [children] :as ast} (process-attr-subquery-ast graph k)\n        k   (process-attr-subquery-key k)\n        env (p.path/append-path env k)]\n    (prn \&quot;?????????????\&quot;)\n    (prn k v)\n    (if children\n      (cond\n        (map? v)\n        (if (process-map-container? ast v)\n          (process-map-container-subquery env ast v)\n          (process-map-subquery env ast v))\n\n        (coll/collection? v)\n        (process-sequence-subquery\n          (cond-&gt; env\n                  ; no batch in sequences that are not vectors because we can't reach those\n                  ; paths for updating later\n                  (not (vector? v))\n                  (assoc ::unsupported-batch? true))\n          ast v)\n\n        :else\n        v)\n      (if-let [x (find entity k)]\n        (val x)\n        v))))&quot;, :offset 1017, :ns &quot;com.wsscode.pathom3.connect.runner&quot;} {:command &quot;(ns com.wsscode.pathom3.interface.eql)&quot;, :offset 38, :ns &quot;com.wsscode.pathom3.connect.runner&quot;} {:command &quot;(defn select-ast-env [{::p.error/keys [lenient-mode?] :as env}]\n  (prn env)\n  (prn\n    (cond-&gt; env lenient-mode? (update ::pf.eql/map-select-include coll/sconj ::pcr/attribute-errors)))\n  (cond-&gt; env lenient-mode? (update ::pf.eql/map-select-include coll/sconj ::pcr/attribute-errors)))&quot;, :offset 286, :ns &quot;com.wsscode.pathom3.interface.eql&quot;} {:command &quot;(defn select-ast-env [{::p.error/keys [lenient-mode?] :as env}]\n  (prn \&quot;XXXXXXXXXXXXXXx\&quot;)\n  (prn env)\n  (prn\n    (cond-&gt; env lenient-mode? (update ::pf.eql/map-select-include coll/sconj ::pcr/attribute-errors)))\n  (cond-&gt; env lenient-mode? (update ::pf.eql/map-select-include coll/sconj ::pcr/attribute-errors)))&quot;, :offset 312, :ns &quot;com.wsscode.pathom3.interface.eql&quot;} {:command &quot;(defn select-ast-env [{::p.error/keys [lenient-mode?] :as env}]\n  (prn \&quot;XXXXXXXXXXXXXXx\&quot;)\n  (prn (::pf.eql/map-select-include env))\n  (prn\n    (cond-&gt; env lenient-mode? (update ::pf.eql/map-select-include coll/sconj ::pcr/attribute-errors)))\n  (cond-&gt; env lenient-mode? (update ::pf.eql/map-select-include coll/sconj ::pcr/attribute-errors)))&quot;, :offset 342, :ns &quot;com.wsscode.pathom3.interface.eql&quot;} {:command &quot;(ns com.wsscode.pathom3.error)&quot;, :offset 30, :ns &quot;com.wsscode.pathom3.interface.eql&quot;} {:command &quot;(defn process-entity-errors [env entity]\n  (prn \&quot;********************8\&quot;)\n  (prn entity)\n  (if (scan-for-errors? entity)\n    (let [ast    (-&gt; entity meta\n                     :com.wsscode.pathom3.connect.runner/run-stats\n                     :com.wsscode.pathom3.connect.planner/index-ast)\n          errors (into {}\n                   (keep (fn [k]\n                           (if-let [error (p.plugin/run-with-plugins env ::wrap-attribute-error\n                                                                 attribute-error entity k)]\n                             (coll/make-map-entry k error))))\n                   (keys ast))]\n      (cond-&gt; entity\n              (seq errors)\n              (assoc :com.wsscode.pathom3.connect.runner/attribute-errors errors)))\n    entity))&quot;, :offset 774, :ns &quot;com.wsscode.pathom3.error&quot;} {:command &quot;(defn attribute-node-error\n  [{:com.wsscode.pathom3.connect.runner/keys [node-run-stats]\n    ::p.attr/keys                            [attribute]\n    ::pcp/keys                               [index-ast]\n    :as                                      graph} node-id]\n  (let [{:com.wsscode.pathom3.connect.runner/keys [node-error node-run-finish-ms]} (get node-run-stats node-id)]\n    (prn \&quot;#################\&quot;)\n    (prn attribute)\n    (cond\n      node-error\n      (coll/make-map-entry\n        node-id\n        {::cause     ::node-exception\n         ::exception node-error})\n\n      node-run-finish-ms\n      (if-not (optional? index-ast attribute)\n        (coll/make-map-entry\n          node-id\n          {::cause ::attribute-missing}))\n\n      :else\n      (if-let [[node-id' error] (-&gt;&gt; (pcp/node-ancestors graph node-id)\n                                     (keep (fn [node-id]\n                                             (if-let [error (get-in node-run-stats [node-id :com.wsscode.pathom3.connect.runner/node-error])]\n                                               [node-id error])))\n                                     first)]\n        (coll/make-map-entry\n          node-id\n          {::cause             ::ancestor-error\n           ::error-ancestor-id node-id'\n           ::exception         error})))))&quot;, :offset 1302, :ns &quot;com.wsscode.pathom3.error&quot;} {:command &quot;(defn attribute-node-error\n  [{:com.wsscode.pathom3.connect.runner/keys [node-run-stats]\n    ::p.attr/keys                            [attribute]\n    ::pcp/keys                               [index-ast]\n    :as                                      graph} node-id]\n  (let [{:com.wsscode.pathom3.connect.runner/keys [node-error node-run-finish-ms]} (get node-run-stats node-id)]\n    (prn \&quot;#################\&quot;)\n    (prn attribute)\n    (prn index-ast)\n    (cond\n      node-error\n      (coll/make-map-entry\n        node-id\n        {::cause     ::node-exception\n         ::exception node-error})\n\n      node-run-finish-ms\n      (if-not (optional? index-ast attribute)\n        (coll/make-map-entry\n          node-id\n          {::cause ::attribute-missing}))\n\n      :else\n      (if-let [[node-id' error] (-&gt;&gt; (pcp/node-ancestors graph node-id)\n                                     (keep (fn [node-id]\n                                             (if-let [error (get-in node-run-stats [node-id :com.wsscode.pathom3.connect.runner/node-error])]\n                                               [node-id error])))\n                                     first)]\n        (coll/make-map-entry\n          node-id\n          {::cause             ::ancestor-error\n           ::error-ancestor-id node-id'\n           ::exception         error})))))&quot;, :offset 1322, :ns &quot;com.wsscode.pathom3.error&quot;} {:command &quot;(defn attribute-node-error\n  [{:com.wsscode.pathom3.connect.runner/keys [node-run-stats]\n    ::p.attr/keys                            [attribute]\n    ::pcp/keys                               [index-ast]\n    :as                                      graph} node-id]\n  (let [{:com.wsscode.pathom3.connect.runner/keys [node-error node-run-finish-ms]} (get node-run-stats node-id)]\n    (prn \&quot;#################\&quot;)\n    (prn attribute)\n    (prn index-ast)\n    (prn\n      (optional? index-ast attribute))\n    (cond\n      node-error\n      (coll/make-map-entry\n        node-id\n        {::cause     ::node-exception\n         ::exception node-error})\n\n      node-run-finish-ms\n      (if-not (optional? index-ast attribute)\n        (coll/make-map-entry\n          node-id\n          {::cause ::attribute-missing}))\n\n      :else\n      (if-let [[node-id' error] (-&gt;&gt; (pcp/node-ancestors graph node-id)\n                                     (keep (fn [node-id]\n                                             (if-let [error (get-in node-run-stats [node-id :com.wsscode.pathom3.connect.runner/node-error])]\n                                               [node-id error])))\n                                     first)]\n        (coll/make-map-entry\n          node-id\n          {::cause             ::ancestor-error\n           ::error-ancestor-id node-id'\n           ::exception         error})))))&quot;, :offset 1370, :ns &quot;com.wsscode.pathom3.error&quot;} {:command &quot;(defn attribute-node-error\n  [{:com.wsscode.pathom3.connect.runner/keys [node-run-stats]\n    ::p.attr/keys                            [attribute]\n    ::pcp/keys                               [index-ast]\n    :as                                      graph} node-id]\n  (let [{:com.wsscode.pathom3.connect.runner/keys [node-error node-run-finish-ms]} (get node-run-stats node-id)]\n    (prn \&quot;#################\&quot;)\n    (prn attribute)\n    (prn index-ast)\n    (prn\n      (get-in index-ast attribute))\n    (cond\n      node-error\n      (coll/make-map-entry\n        node-id\n        {::cause     ::node-exception\n         ::exception node-error})\n\n      node-run-finish-ms\n      (if-not (optional? index-ast attribute)\n        (coll/make-map-entry\n          node-id\n          {::cause ::attribute-missing}))\n\n      :else\n      (if-let [[node-id' error] (-&gt;&gt; (pcp/node-ancestors graph node-id)\n                                     (keep (fn [node-id]\n                                             (if-let [error (get-in node-run-stats [node-id :com.wsscode.pathom3.connect.runner/node-error])]\n                                               [node-id error])))\n                                     first)]\n        (coll/make-map-entry\n          node-id\n          {::cause             ::ancestor-error\n           ::error-ancestor-id node-id'\n           ::exception         error})))))&quot;, :offset 1367, :ns &quot;com.wsscode.pathom3.error&quot;} {:command &quot;(defn attribute-node-error\n  [{:com.wsscode.pathom3.connect.runner/keys [node-run-stats]\n    ::p.attr/keys                            [attribute]\n    ::pcp/keys                               [index-ast]\n    :as                                      graph} node-id]\n  (let [{:com.wsscode.pathom3.connect.runner/keys [node-error node-run-finish-ms]} (get node-run-stats node-id)]\n    (prn \&quot;#################\&quot;)\n    (prn attribute)\n    (prn index-ast)\n    (prn\n      (get-in index-ast [attribute]))\n    (cond\n      node-error\n      (coll/make-map-entry\n        node-id\n        {::cause     ::node-exception\n         ::exception node-error})\n\n      node-run-finish-ms\n      (if-not (optional? index-ast attribute)\n        (coll/make-map-entry\n          node-id\n          {::cause ::attribute-missing}))\n\n      :else\n      (if-let [[node-id' error] (-&gt;&gt; (pcp/node-ancestors graph node-id)\n                                     (keep (fn [node-id]\n                                             (if-let [error (get-in node-run-stats [node-id :com.wsscode.pathom3.connect.runner/node-error])]\n                                               [node-id error])))\n                                     first)]\n        (coll/make-map-entry\n          node-id\n          {::cause             ::ancestor-error\n           ::error-ancestor-id node-id'\n           ::exception         error})))))&quot;, :offset 1369, :ns &quot;com.wsscode.pathom3.error&quot;} {:command &quot;(get-in '{:com.example.person/parents ({:com.example.person/surname \&quot;Macdonald Black\&quot;})} [:com.example.person/parents 0 :com.example.person/surname])&quot;, :offset 149, :ns &quot;com.calebmacdonaldblack.cyclone.example2&quot;} {:command &quot;(get-in '{:com.example.person/parents [{:com.example.person/surname \&quot;Macdonald Black\&quot;}]} [:com.example.person/parents 0 :com.example.person/surname])&quot;, :offset 149, :ns &quot;com.calebmacdonaldblack.cyclone.example2&quot;} {:command &quot;(vec nil)&quot;, :offset 8, :ns &quot;user&quot;} {:command &quot;(set! *print-namespace-maps* false)&quot;, :offset 35, :ns &quot;user&quot;} {:command &quot;(/ 100 0.15)&quot;, :offset 12, :ns &quot;com.calebmacdonaldblack.cyclone.example.ordering&quot;} {:command &quot;(* 100 0.15)&quot;, :offset 12, :ns &quot;com.calebmacdonaldblack.cyclone.example.ordering&quot;} {:command &quot;(* 100 1.15)&quot;, :offset 12, :ns &quot;com.calebmacdonaldblack.cyclone.example.ordering&quot;} {:command &quot;(/ 100 1.15)&quot;, :offset 12, :ns &quot;com.calebmacdonaldblack.cyclone.example.ordering&quot;} {:command &quot;(* 100 (- 1 0.15))&quot;, :offset 18, :ns &quot;com.calebmacdonaldblack.cyclone.example.ordering&quot;} {:command &quot;(require '[clojure.tools.namespace.repl])\n(clojure.tools.namespace.repl/refresh)&quot;, :offset 80, :ns &quot;user&quot;} {:command &quot;(require '[portal.api :as p])\n\n(def p (p/open {:launcher :intellij}))\n\n(add-tap #'p/submit)&quot;, :offset 91, :ns &quot;user&quot;}], :remote []}}</component>
  <component name="RunManager">
    <configuration default="true" type="Babashka" factoryName="BabashkaLocalRepl" activateToolWindowBeforeRun="false">
      <setting name="displayName" value="" />
      <setting name="bbPath" value="" />
      <setting name="parameters" value="" />
      <option name="PARENT_ENVS" value="true" />
      <setting name="workingDir" value="" />
      <setting name="focusEditor" value="false" />
      <method v="2">
        <option name="Make" enabled="true" />
      </method>
    </configuration>
    <configuration default="true" type="ClojureREPL" factoryName="Local" activateToolWindowBeforeRun="false">
      <setting name="displayName" value="" />
      <setting name="replType" value="NREPL" />
      <setting name="execution" value="LEININGEN" />
      <setting name="jvmArgs" value="" />
      <setting name="parameters" value="" />
      <setting name="workingDir" value="" />
      <setting name="profiles" value="" />
      <setting name="aliases" value="" />
      <setting name="fixLineNumbers" value="false" />
      <setting name="focusEditor" value="false" />
      <method v="2" />
    </configuration>
    <configuration default="true" type="ClojureREPL" factoryName="Remote" activateToolWindowBeforeRun="false">
      <setting name="displayName" value="" />
      <setting name="host" value="" />
      <setting name="port" value="0" />
      <setting name="replType" value="SOCKET" />
      <setting name="configType" value="SPECIFY" />
      <setting name="replPortFileType" value="STANDARD" />
      <setting name="customPortFile" value="" />
      <setting name="fixLineNumbers" value="false" />
      <setting name="focusEditor" value="false" />
      <method v="2" />
    </configuration>
  </component>
  <component name="SpellCheckerSettings" RuntimeDictionaries="0" Folders="0" CustomDictionaries="0" DefaultDictionary="project-level" UseSingleDictionary="true" transferred="true" />
  <component name="TaskManager">
    <task active="true" id="Default" summary="Default task">
      <changelist id="637c114c-5487-480f-807c-2ab5c2ce974e" name="Changes" comment="" />
      <created>1663444511881</created>
      <option name="number" value="Default" />
      <option name="presentableId" value="Default" />
      <updated>1663444511881</updated>
      <workItem from="1663444513133" duration="12295000" />
      <workItem from="1663898584025" duration="121000" />
      <workItem from="1664147397490" duration="3317000" />
      <workItem from="1664213740034" duration="12080000" />
      <workItem from="1664241223330" duration="1161000" />
      <workItem from="1664497083112" duration="602000" />
      <workItem from="1664758114026" duration="3122000" />
      <workItem from="1665101490222" duration="1418000" />
      <workItem from="1665513841853" duration="525000" />
      <workItem from="1665679930056" duration="3937000" />
      <workItem from="1665765333814" duration="606000" />
    </task>
    <servers />
  </component>
  <component name="TypeScriptGeneratedFilesManager">
    <option name="version" value="3" />
  </component>
  <component name="Vcs.Log.Tabs.Properties">
    <option name="TAB_STATES">
      <map>
        <entry key="MAIN">
          <value>
            <State />
          </value>
        </entry>
      </map>
    </option>
  </component>
  <component name="VgoProject">
    <settings-migrated>true</settings-migrated>
  </component>
  <component name="XSLT-Support.FileAssociations.UIState">
    <expand />
    <select />
  </component>
</project>